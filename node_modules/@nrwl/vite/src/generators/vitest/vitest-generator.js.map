{"version":3,"sources":["../../../../../../packages/vite/src/generators/vitest/vitest-generator.ts"],"sourcesContent":["import {\n  addDependenciesToPackageJson,\n  convertNxGenerator,\n  formatFiles,\n  generateFiles,\n  GeneratorCallback,\n  joinPathFragments,\n  offsetFromRoot,\n  readProjectConfiguration,\n  runTasksInSerial,\n  Tree,\n  updateJson,\n} from '@nrwl/devkit';\nimport {\n  addOrChangeTestTarget,\n  createOrEditViteConfig,\n  findExistingTargetsInProject,\n} from '../../utils/generator-utils';\nimport { VitestGeneratorSchema } from './schema';\n\nimport initGenerator from '../init/init';\nimport {\n  vitestCoverageC8Version,\n  vitestCoverageIstanbulVersion,\n} from '../../utils/versions';\n\nexport async function vitestGenerator(\n  tree: Tree,\n  schema: VitestGeneratorSchema\n) {\n  const tasks: GeneratorCallback[] = [];\n\n  const { targets, root, projectType } = readProjectConfiguration(\n    tree,\n    schema.project\n  );\n  let testTarget =\n    schema.testTarget ??\n    findExistingTargetsInProject(targets).validFoundTargetName.test ??\n    'test';\n\n  addOrChangeTestTarget(tree, schema, testTarget);\n\n  const initTask = await initGenerator(tree, {\n    uiFramework: schema.uiFramework,\n  });\n  tasks.push(initTask);\n\n  if (!schema.skipViteConfig) {\n    createOrEditViteConfig(\n      tree,\n      {\n        ...schema,\n        includeVitest: true,\n        includeLib: projectType === 'library',\n      },\n      true\n    );\n  }\n\n  createFiles(tree, schema, root);\n  updateTsConfig(tree, schema, root);\n\n  const installCoverageProviderTask = addDependenciesToPackageJson(\n    tree,\n    {},\n    schema.coverageProvider === 'istanbul'\n      ? {\n          '@vitest/coverage-istanbul': vitestCoverageIstanbulVersion,\n        }\n      : {\n          '@vitest/coverage-c8': vitestCoverageC8Version,\n        }\n  );\n  tasks.push(installCoverageProviderTask);\n\n  if (!schema.skipFormat) {\n    await formatFiles(tree);\n  }\n\n  return runTasksInSerial(...tasks);\n}\n\nfunction updateTsConfig(\n  tree: Tree,\n  options: VitestGeneratorSchema,\n  projectRoot: string\n) {\n  updateJson(tree, joinPathFragments(projectRoot, 'tsconfig.json'), (json) => {\n    if (\n      json.references &&\n      !json.references.some((r) => r.path === './tsconfig.spec.json')\n    ) {\n      json.references.push({\n        path: './tsconfig.spec.json',\n      });\n    }\n\n    if (!json.compilerOptions?.types?.includes('vitest')) {\n      if (json.compilerOptions?.types) {\n        json.compilerOptions.types.push('vitest');\n      } else {\n        json.compilerOptions ??= {};\n        json.compilerOptions.types = ['vitest'];\n      }\n    }\n    return json;\n  });\n\n  if (options.inSourceTests) {\n    const tsconfigLibPath = joinPathFragments(projectRoot, 'tsconfig.lib.json');\n    const tsconfigAppPath = joinPathFragments(projectRoot, 'tsconfig.app.json');\n    if (tree.exists(tsconfigLibPath)) {\n      updateJson(\n        tree,\n        joinPathFragments(projectRoot, 'tsconfig.lib.json'),\n        (json) => {\n          (json.compilerOptions.types ??= []).push('vitest/importMeta');\n          return json;\n        }\n      );\n    } else if (tree.exists(tsconfigAppPath)) {\n      updateJson(\n        tree,\n        joinPathFragments(projectRoot, 'tsconfig.app.json'),\n        (json) => {\n          (json.compilerOptions.types ??= []).push('vitest/importMeta');\n          return json;\n        }\n      );\n    }\n  }\n}\n\nfunction createFiles(\n  tree: Tree,\n  options: VitestGeneratorSchema,\n  projectRoot: string\n) {\n  generateFiles(tree, joinPathFragments(__dirname, 'files'), projectRoot, {\n    tmpl: '',\n    ...options,\n    projectRoot,\n    offsetFromRoot: offsetFromRoot(projectRoot),\n  });\n}\n\nexport default vitestGenerator;\nexport const vitestSchematic = convertNxGenerator(vitestGenerator);\n"],"names":["vitestGenerator","vitestSchematic","json","tree","schema","tasks","targets","root","projectType","readProjectConfiguration","project","testTarget","findExistingTargetsInProject","validFoundTargetName","test","addOrChangeTestTarget","initTask","initGenerator","uiFramework","push","skipViteConfig","createOrEditViteConfig","includeVitest","includeLib","createFiles","updateTsConfig","installCoverageProviderTask","addDependenciesToPackageJson","coverageProvider","vitestCoverageIstanbulVersion","vitestCoverageC8Version","skipFormat","formatFiles","runTasksInSerial","options","projectRoot","updateJson","joinPathFragments","references","some","r","path","compilerOptions","types","includes","inSourceTests","tsconfigLibPath","tsconfigAppPath","exists","generateFiles","__dirname","tmpl","offsetFromRoot","convertNxGenerator"],"mappings":"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"}